---
title: '22, 33最后的测试 hi'
date: 2012-01-19 18:09:05
author: linpx
categories: test ok
comments: true
layout: post
markup: markdown
published: true
---
---------- Forwarded message ----------
From: Lin <jmlinpx@gmail.com>
Date: 2012/1/20
Subject: Fwd: 最后的测试, hi || secret: abcd1234 / author: linpx / categories:
test ok / comments: true
To: Penny Lin <jmail2octo@gmail.com>


####jekymail配置

{% codeblock %}
git clone git://github.com/masukomi/JekyllMail.git/home/wwwroot/jekyllmail
  #选择jekyllmail作为存放的文件夹
cd /home/wwwroot/jekyllmail
rvm --default use 1.9.2
apt-get install libxslt-dev libxml2-dev
gem install nokogiri
bundle install
{% endcodeblock %}

进入jekyllmail文件夹，修改`_config.yml`,具体内容如下:

{% codeblock %}
blogs:
- jekyll_repo: /home/wwwroot/blog     #这是我服务器上布置的octopress博客文件夹
  source_dir: /home/wwwroot/blog/source   #这个文件夹下包括_posts, _includes等
  pop_server: pop.gmail.com
  pop_user: xxx  #自定义的邮件接收地址(也就是xxx@gmail.com)
  pop_password: yyy  #自定义的邮件登录密码
  secret: 123!  #secret作用为让jekyllmail区别邮件是否为你想要发送的博文，自己设个吧
  markup: markdown
  site_url: http://colors4.us  #这里是我的网址
  commit_after_save: true
{% endcodeblock %}

邮件发送博文牵涉到两个邮件，发送的邮件和接收的邮件，jekyllmail会自己登录到接守的邮件上去检查是否有需要发送的博客。所以，我建议两个都用
gmail，确认设置中已经打开了pop3支持和utf-8发送。

是不是超级简单。我们现在可以测试一下是否有用。进入自己的gmail信箱给`xxx@gmail.com`发新邮件，邮件题目subject
如下，更详细的情况可参考程序作者[@masukomi](http://twitter.com/masukomi)的[git页面](
https://github.com/masukomi/JekyllMail):

{% codeblock %}
这里是博文的题目中文亦可 || secret: 123! / author: linpx / categories: test ok /
comments: true      #categories这里很特殊，各种目直接用空格隔开就行了，不要添逗号
{% endcodeblock %}

邮件的内容直接拷入已经写好的markdown格式的文章即可。我建议书写格式去除`rich formatting`，改用`plain text` (这是
gmail内置的功能)。然后点击发送。

{% codeblock jekyllmail folder %}
ruby jekyllmail.rb
{% endcodeblock %}

如果你能够在`/home/wwwroot/blog/source/_posts`中看到你刚才发过去的邮件，那么你的jekymail配置就是成功了。(这
里我首次测试是不成功的，百思不得其解，后来发现发的测试邮件在第一时间被我另一个设好crontab的服务器给接走鸟。-_-!!!)
####ubuntu下cron设置
很明显，要让博文自动发送，必须有自动机制，程序作者程序作者[@masukomi](http://twitter.com/masukomi)
也建议用cron。cron是linux下的定时器，定时运行程序。我在这里的设置相当乱，因为我对cron不熟悉，能用的原因是我一个一个试出来的，笨方法，大家别学。

* cron在运行的时候，是不会采用我们已经有的环境的。所以很多情况下，我们直接运行ruby
xxx.rb可以，但是在cron下是不行的，因为没有定义rubi环境。这个很重要，我花了3个小时才捉摸出来。
*    ubuntu下的cron设置很容易，在任何目录下运行`crontab -e`就行，存盘出来后应该就是已经放入到系统运行中去啦。
*    cron的语法必须要了解，大家可以看看这个[页面](https://help.ubuntu.com/community/CronHowto)。我给出很简单的例子。`*/2
* * * * command`意思为每隔两分钟运行一次命令，而`* */3 * * * command`则是每隔三小时运行一次命令。

我直接给出我可以用的设置，修改文件夹位置后，引用即可。输入`crontab
-e`,加到最后一行。内容中涉及到`ruby`和`rvw`的地址，用`which ruby`和`which rvm`来确定。
{% codeblock %}
* * * * * /bin/echo "check if cron works" >> /home/wwwroot/1.log
#此命令为每隔一分钟写入log文件，目的用于测试cron是否正常工作，确认后可直接删除。
*/5 * * * *  shell=/usr/local/rvm/bin/rvm-shell;
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/rvm/bin:/usr/local/rvm/rubies/ruby-1.9.2-p290/bin/
; export PATH ; cd /home/wwwroot/jekyllmail && ruby jekyllmail.rb
#每隔5分钟登录检查邮箱，是否有博文，强迫症轻度患者建议改为每一分钟。
{% endcodeblock %}
