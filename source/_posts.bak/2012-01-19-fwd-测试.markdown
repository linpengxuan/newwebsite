---
title: 'Fwd: 测试'
date: 2012-01-19 09:30:12
author: linpx
categories: test ok
layout: post
markup: markdown
published: true
---
####jekymail配置

{% codeblock %}

git clone git://github.com/masukomi/JekyllMail.git /home/wwwroot/jekyllmail
#选择jekyllmail作为存放的文件夹

cd /home/wwwroot/jekyllmail

rvm --default use 1.9.2

apt-get install libxslt-dev libxml2-dev

gem install nokogiri

bundle install

{% endcodeblock %}



进入jekyllmail文件夹，修改 _config.yml,具体内容如下:

{% codeblock  _config.yml %}

blogs:

- jekyll_repo: /home/wwwroot/blog     #这是我服务器上布置的octopress博客文件夹

  source_dir: /home/wwwroot/blog/source   #这个文件夹下包括_posts, _includes等

  pop_server: pop.gmail.com

  pop_user: xxx  #自定义的邮件接收地址(也就是xxx@gmail.com)

  pop_password: yyy  #自定义的邮件登录密码

  secret: 123!  #secret作用为让jekyllmail区别邮件是否为你想要发送的博文，自己设个吧

  markup: markdown

  site_url: http://colors4.us  #这里是我的网址

  commit_after_save: true

{% endcodeblock %}



邮件发送博文牵涉到两个邮件，发送的邮件和接收的邮件，jekyllmail会自己登录到接守的邮件上去检查是否有需要发送的博客。所以，我建议两个都用
gmail，确认设置中已经打开了pop3支持和utf-8发送。



是不是超级简单。我们现在可以测试一下是否有用。进入自己的gmail信箱给`xxx@gmail.com`发新邮件，邮件题目subject
如下，更详细的情况可参考程序作者的[git页面]( https://github.com/masukomi/JekyllMail):

{% codeblock %}

这里是博文的题目中文亦可 || secret: 123! / author: linpx / categories: test ok
#categories这里很特殊，各种目直接用空格隔开就行了，不要添逗号

{% endcodeblock %}

邮件的内容直接拷入已经写好的markdown格式的文章即可。我建议书写格式去除`rich formatting`，改用`plain text` (这是
gmail内置的功能)。然后点击发送。

{% codeblock jekyllmail folder %}

ruby jekyllmail.rb

{% endcodeblock %}

如果你能够在/home/wwwroot/blog/source/_posts中看到你刚才发过去的邮件，那么你的jekymail配置就是成功了。(这
里我首次测试是不成功的，百思不得其解，后来发现发的测试邮件在第一时间被我另一个设好crontab的服务器给接走鸟。-_-!!!)
